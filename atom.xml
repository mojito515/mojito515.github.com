<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[方晨曦的网络日志]]></title>
  <link href="http://mojito515.github.io/atom.xml" rel="self"/>
  <link href="http://mojito515.github.io/"/>
  <updated>2016-09-01T10:35:12+08:00</updated>
  <id>http://mojito515.github.io/</id>
  <author>
    <name><![CDATA[mojito515@126.com]]></name>
    <email><![CDATA[mojito515@126.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用spring中的@Transactional注解时，可能需要注意的地方]]></title>
    <link href="http://mojito515.github.io/blog/2016/08/31/transactionalinspring/"/>
    <updated>2016-08-31T22:44:54+08:00</updated>
    <id>http://mojito515.github.io/blog/2016/08/31/transactionalinspring</id>
    <content type="html"><![CDATA[<!--more-->


<h3>前情提要</h3>

<p>在编写业务层方法时，会遇到很多需要事务提交的操作，spring框架为我们提供很方便的做法，就是在需要事务提交的方法上添加@Transactional注解，比起我们自己开启事务、提交以及控制回滚，要简单的多。但是在使用的时候容易犯一些错误。我就自己的错误经历总结如下。</p>

<h3>枯燥的背景知识（可以忽略）</h3>

<p>编程式事务管理&amp;声明式事务管理:</p>

<p>（一）编程式事务管理
在 Spring 出现以前，编程式事务管理对基于 POJO 的应用来说是唯一选择。用过 Hibernate 的人都知道，我们需要在代码中显式调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。通过 Spring 提供的事务管理 API，我们可以在代码中灵活控制事务的执行。在底层，Spring 仍然将事务操作委托给底层的持久化框架来执行。</p>

<p>（二）声明式事务管理</p>

<p>1）Spring 的声明式事务管理在底层是建立在 AOP 的基础之上的。其本质是对方法前后进行拦截，然后在目标方法开始之前创建或者加入一个事务，在执行完目标方法之后根据执行情况提交或者回滚事务。</p>

<p>2）声明式事务最大的优点就是不需要通过编程的方式管理事务，这样就不需要在业务逻辑代码中掺杂事务管理的代码，只需在配置文件中做相关的事务规则声明（或通过等价的基于标注的方式），便可以将事务规则应用到业务逻辑中。因为事务管理本身就是一个典型的横切逻辑，正是 AOP 的用武之地。Spring 开发团队也意识到了这一点，为声明式事务提供了简单而强大的支持。</p>

<p>3）声明式事务管理曾经是 EJB 引以为傲的一个亮点， Spring 让 POJO 在事务管理方面也拥有了和 EJB 一样的待遇，让开发人员在 EJB 容器之外也用上了强大的声明式事务管理功能，这主要得益于 Spring 依赖注入容器和 Spring AOP 的支持。依赖注入容器为声明式事务管理提供了基础设施，使得 Bean 对于 Spring 框架而言是可管理的；而 Spring AOP 则是声明式事务管理的直接实现者。</p>

<p>4）建议在开发中使用声明式事务，不仅因为其简单，更主要是因为这样使得纯业务代码不被污染，极大方便后期的代码维护。和编程式事务相比，声明式事务唯一不足地方是，后者的最细粒度只能作用到方法级别，无法做到像编程式事务那样可以作用到代码块级别。但是即便有这样的需求，也存在很多变通的方法，比如，可以将需要进行事务管理的代码块独立为方法等等。</p>

<hr />

<p><strong>从@Transactional的代码当中可以看到，可配置的参数主要有：</strong></p>

<ol>
<li>事务隔离级别: <code>Isolation isolation() default Isolation.DEFAULT;</code></li>
<li>事务传播行为:<code>Propagation propagation() default Propagation.REQUIRED;</code></li>
<li>回滚、不回滚的异常类:<code>rollbackFor()   noRollbackFor() </code></li>
<li>超时:<code>int timeout() default TransactionDefinition.TIMEOUT_DEFAULT;</code></li>
</ol>


<p>mysql的innob引擎支持标准sql事务的四个级别:</p>

<blockquote><p>REPEATABLE READ(默认)</p>

<p> | READ COMMITTED</p>

<p> | READ UNCOMMITTED</p>

<p> | SERIALIZABLE</p></blockquote>

<p>默认是可以重复读，以repeatable_read 为例，默认情况它使用了Consistent Nonlocking Reads，其实就是多版本快照方式，一个repeatable_read 事务里面，第一次读取从数据库取，然后这个数据放入快照里面，后面的读取都是从快照里面取，这样虽然保证了一个事务里面读取的数据的一致性，但是会出现其他事务已经改了数据库里面的值，而当前事务却还在使用老的数据。如果对于数据的同步要求很高的话，可以在sql上面使用锁，</p>

<blockquote><p>select &hellip; lock in share mode; //共享锁，可同时读，不能同时写</p>

<p>select &hellip; for update; // 排他锁，独占</p></blockquote>

<p>但是用锁，肯定影响性能，至少mysql没有使用锁来实现repeatable-read隔离级别。</p>

<p>如果是SERIALIZABLE级别，mysql倒是会自动的将select转化为select &hellip; LOCK IN SHARE MODE，即使用了共享锁。</p>

<hr />

<p>事务的传播行为:
所谓事务的传播行为是指，如果在开始当前事务之前，一个事务上下文已经存在，此时有若干选项可以指定一个事务性方法的执行行为。在TransactionDefinition定义中包括了如下几个表示传播行为的常量：</p>

<p>1、TransactionDefinition.PROPAGATION_REQUIRED：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。</p>

<p>2、TransactionDefinition.PROPAGATION_REQUIRES_NEW：创建一个新的事务，如果当前存在事务，则把当前事务挂起。</p>

<p>3、TransactionDefinition.PROPAGATION_SUPPORTS：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</p>

<p>4、TransactionDefinition.PROPAGATION_NOT_SUPPORTED：以非事务方式运行，如果当前存在事务，则把当前事务挂起。</p>

<p>5、TransactionDefinition.PROPAGATION_NEVER：以非事务方式运行，如果当前存在事务，则抛出异常。</p>

<p>6、TransactionDefinition.PROPAGATION_MANDATORY：如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。</p>

<p>7、TransactionDefinition.PROPAGATION_NESTED：如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于TransactionDefinition.PROPAGATION_REQUIRED。</p>

<p>这里需要指出的是，前面的六种事务传播行为是 Spring 从 EJB 中引入的，他们共享相同的概念。而 PROPAGATION_NESTED是 Spring 所特有的。以 PROPAGATION_NESTED 启动的事务内嵌于外部事务中（如果存在外部事务的话），此时，内嵌事务并不是一个独立的事务，它依赖于外部事务的存在，只有通过外部的事务提交，才能引起内部事务的提交，嵌套的子事务不能单独提交。如果熟悉 JDBC 中的保存点（SavePoint）的概念，那嵌套事务就很容易理解了，其实嵌套的子事务就是保存点的一个应用，一个事务中可以包括多个保存点，每一个嵌套子事务。另外，外部事务的回滚也会导致嵌套子事务的回滚。</p>

<hr />

<h3>总结：</h3>

<ol>
<li>Transactional 注解可以被应用于接口定义和接口方法、类定义和类的 public 方法上。</li>
<li>&ldquo;proxy-target-class&rdquo; 属性值来控制是基于接口的还是基于类的代理被创建。
 &lt;tx:annotation-driven transaction-manager=&ldquo;transactionManager&rdquo; proxy-target-class=&ldquo;true&rdquo;/>
 注意：proxy-target-class属性值决定是基于接口的还是基于类的代理被创建。如果proxy-target-class 属性值被设置为true，那么基于类的代理将起作用（这时需要cglib库）。如果proxy-target-class属值被设置为false或者这个属性被省略，那么标准的JDK 基于接口的代理。</li>
<li>注解@Transactional cglib与java动态代理最大区别是代理目标对象不用实现接口,那么注解要是写到接口方法上，要是使用cglib代理，这是注解事物就失效了，为了保持兼容注解最好都写到实现类方法上。</li>
<li>Spring团队建议在具体的类（或类的方法）上使用 @Transactional 注解，而不要使用在类所要实现的任何接口上。在接口上使用 @Transactional 注解，只能当你设置了基于接口的代理时它才生效。因为注解是 不能继承的，这就意味着如果正在使用基于类的代理时，那么事务的设置将不能被基于类的代理所识别，而且对象也将不会被事务代理所包装。</li>
<li>@Transactional 的事务开启 ，或者是基于接口的 或者是基于类的代理被创建。所以在同一个类中一个方法调用另一个方法有事务的方法，事务是不会起作用的。
 原因：（这也是为什么在项目中有些@Async并没有异步执行）
 spring 在扫描bean的时候会扫描方法上是否包含@Transactional注解，如果包含，spring会为这个bean动态地生成一个子类（即代理类，proxy），代理类是继承原来那个bean的。此时，当这个有注解的方法被调用的时候，实际上是由代理类来调用的，代理类在调用之前就会启动transaction。然而，如果这个有注解的方法是被同一个类中的其他方法调用的，那么该方法的调用并没有通过代理类，而是直接通过原来的那个bean，所以就不会启动transaction，我们看到的现象就是@Transactional注解无效。</li>
</ol>


<hr />

<p><strong>Tips：</strong> 使用 ~for update ~实现实现悲观锁的时候，需要注意锁的级别，Mysql InnoDB 默认<strong>行级锁</strong>。行级锁都是基于索引的，如果一条sql语句用不到索引，是不会使用行级锁的，会使用表级，把整张表锁住，这点需要注意。</p>

<p><strong>Tips：</strong> 使用乐观锁时多数实现方法是使用版本号，或者时间戳。但是如果事务的隔离级别允许重复读（比如：REPEATABLE_READ；mysql InnoDB默认也是这个级别）,那么使用乐观锁是查询不出版本或者时间戳的变化的,但是oracle的话默认就可以。</p>

<p><strong>Tips：</strong> spring默认的事务隔离级别为底层数据区的隔离级别。所以，如果你用的是Mysql的InnoDB引擎，那么级别就是：REPEATABLE READ；如果你用的是oracle，那么级别就是READ COMMITED。</p>

<p><strong>Tips：</strong> spring的@Transactional注解事务创博行为默认值为：PROPAGATION_REQUIRED</p>

<p>以上是我能想到的相关，如有错误希望大家及时和我探讨。</p>

<h3>相关查询资料：</h3>

<p>[<a href="http://zliguo.iteye.com/blog/2230013">http://zliguo.iteye.com/blog/2230013</a>]</p>

<p>[<a href="http://my.oschina.net/guanzhenxing/blog/214228">http://my.oschina.net/guanzhenxing/blog/214228</a>]</p>

<p>[<a href="http://blog.csdn.net/u012228718/article/details/42750119#t1">http://blog.csdn.net/u012228718/article/details/42750119#t1</a>]</p>

<p>[<a href="http://my.oschina.net/yybear/blog/103235">http://my.oschina.net/yybear/blog/103235</a>]</p>

<p>[<a href="http://my.oschina.net/feichexia/blog/202520">http://my.oschina.net/feichexia/blog/202520</a>]</p>

<p>[<a href="http://www.hollischuang.com/archives/934">http://www.hollischuang.com/archives/934</a>]</p>

<p>[<a href="http://blog.csdn.net/clementad/article/details/47339519">http://blog.csdn.net/clementad/article/details/47339519</a>]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何使用gitlab的flow以及代码review]]></title>
    <link href="http://mojito515.github.io/blog/2016/03/09/ru-he-shi-yong-gitlabde-flowyi-ji-dai-ma-review/"/>
    <updated>2016-03-09T11:50:02+08:00</updated>
    <id>http://mojito515.github.io/blog/2016/03/09/ru-he-shi-yong-gitlabde-flowyi-ji-dai-ma-review</id>
    <content type="html"><![CDATA[<!--more-->


<h3>Git工作流</h3>

<p>我们在工作中经常用到git来管理自己的代码，也会涉及到多人协作的场景，
被广泛使用的三种工作流如下：</p>

<ul>
<li><h4>Git flow</h4></li>
<li><h4>Github flow</h4></li>
<li><h4>Gitlab flow</h4></li>
</ul>


<h5>以下只简单总结三种flow的特点和弊端,具体的介绍和比较请移步阮一峰老师的文章<a href="http://7xpd26.com1.z0.glb.clouddn.com/gitlab_create_project.png">《Git工作流》</a></h5>

<h4>Git flow</h4>

<blockquote><p>典型的长期维护master分支和develop分支，因为是FDD（功能驱动开发），所以会在协作开发中衍生出 功能分支（feature branch）、补丁分支（hotfix branch）、预发版分支（release branch），完成之后会合并到develop或者master分支，之后删除。优点是清晰可控，但这个模式是基于“版本发布”的，目标是一段时间产出一个新版本，不适合“持续发布”的网站开发。</p></blockquote>

<h4>Github flow</h4>

<blockquote><p>只有一个master长期分支，需要协同的人可以fork代码（其实就是新建了一个自己的分支，并且pull到了master上的代码），当你的功能需求代码完成之后，或者需要讨论的时候，就向master发起一个pull request。通知到别人评审、讨论、review你的代码，方便的是，在request提交之后评审的过程中，你还可以提交代码。等到你的request被accept，分支会合并到master，重新部署后，你原来的那个分支就可以删除啦。缺点是有时你的产品发布的代码版本和你master最新的版本并不是一个（比如因为苹果审核需要时间，那么你的代码就需要另一个分支来保留线上版本）。</p></blockquote>

<h4>Gitlab flow</h4>

<blockquote><p>引入了“上游优先”（upsteam first）的原则。只存在一个主分支master，它是所有其他分支的"上游"。只有上游分支采纳的代码变化，才能应用到其他分支。版本发布"的项目，建议的做法是每一个稳定版本，都要从master分支拉出一个分支。使用gitlab建立group project，可以将成员全部添加进小组中，每个人的提交都以分支合并进master分支的方式进行，我们可以将master设置成protected branch，这样就做到了强制代码review的机制，利于提升代码的质量。Issue 用于 Bug追踪和需求管理。建议先新建 Issue，再新建对应的功能分支。</p></blockquote>

<hr />

<h3>Gitlab如何使用</h3>

<p>首先，在gitlab的console中创建工程，创建好后会有如下图的命令提示，告知你怎样在本地创建代码项目并push（使用sourcetree更简单）：</p>

<p><img src="http://7xpd26.com1.z0.glb.clouddn.com/gitlab_create_project.png" alt="create project" /></p>

<p>项目创建完成之后，给项目添加成员：</p>

<p><img src="http://7xpd26.com1.z0.glb.clouddn.com/gitlab_new_member.png" alt="new member" /></p>

<p>把master分支设置成受保护分支，这样成员在提交代码的时候，只能先提交merge request（强制做代码review）：</p>

<p><img src="http://7xpd26.com1.z0.glb.clouddn.com/gitlab_protected_branch.png" alt="proetcted branch" /></p>

<p>在本地，以developer的身份push代码，会显示不成功：</p>

<p><img src="http://7xpd26.com1.z0.glb.clouddn.com/gitlab_push_error.png" alt="error" /></p>

<p>正常流程中，是先本地从master上拉取新建分支：</p>

<p><img src="http://7xpd26.com1.z0.glb.clouddn.com/gitlab_new_feature.png" alt="new branch" /></p>

<p>当有代码需要提交push的时候，在gitlab的console中创建merge request 完成代码向master分支的提交：</p>

<p><img src="http://7xpd26.com1.z0.glb.clouddn.com/gitlab_merge_request.png" alt="merge request" /></p>

<p>负责review的小伙伴可以对代码进行评论，在accept之前，该分支中再次push的commit都归属于这次merge request。accept之后，分支自动合并到master分支中（可以勾选直接删除merge的功能分支）:</p>

<p><img src="http://7xpd26.com1.z0.glb.clouddn.com/gitlab_review.png" alt="review" /></p>

<p>至此，一次完整的代码提交过程就完成了。当然，在项目上线之后，会有“下游”的分支，例如 生产版本的分支、预生产版本的分支也会加入到protected branch的行列。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[硝烟中的Scrum——读书笔记]]></title>
    <link href="http://mojito515.github.io/blog/2015/12/23/xiao-yan-zhong-de-scrum-du-shu-bi-ji/"/>
    <updated>2015-12-23T18:10:26+08:00</updated>
    <id>http://mojito515.github.io/blog/2015/12/23/xiao-yan-zhong-de-scrum-du-shu-bi-ji</id>
    <content type="html"><![CDATA[<!--more-->


<p>产品的<strong>Story</strong>产出需求池中的<strong>BackLog</strong>，产品的BackLog有两种表现形式：</p>

<ul>
<li>Excel表格 ：详细记录并且留存</li>
<li>索引卡 ：用作互动，展开演示（在计划会议上）</li>
</ul>


<p>每个BackLog由三个<strong>维度</strong>组成：</p>

<ul>
<li>重要性 ：由产品经理把控</li>
<li>范围 ： 涉及到哪些业务或者技术团队</li>
<li>出事估值 ： 预估完成需求的时间，由开发人员讨论完成之后把控</li>
</ul>


<p><img src="http://7xpd26.com1.z0.glb.clouddn.com/scrum-product-story.png" alt="produc-story" /></p>

<p><strong>扑克牌时间估算法</strong>，可以客观地估算每个开发Story的时间</p>

<p><img src="http://7xpd26.com1.z0.glb.clouddn.com/scrum-backlog.png" alt="backlog" /></p>

<p><strong>Focus Factor</strong> 是从团队中以往的Sprint完成情况中总结出来的，其中<strong>Man-Days</strong>汇总了
全部成员的可用人天，但前提是你的小伙伴都是<strong>全栈工程师</strong></p>

<p><img src="http://7xpd26.com1.z0.glb.clouddn.com/scrum-focus-factor.png" alt="focus-factor" /></p>

<p>Sprint Master 在计划会议完成之后，负责产出一个doc，来诠释这个Sprint的
计划时间、意义、实现内容、目标，并且公示给全部人</p>

<p><img src="http://7xpd26.com1.z0.glb.clouddn.com/scrum-sprint-doc.png" alt="sprint-doc" /></p>

<p><strong>XP</strong>区别于<strong>Agile</strong> ：<br/>
* 敏捷开发侧重管理和组织实践<br/>
* XP侧重编程实践</p>

<p><img src="http://7xpd26.com1.z0.glb.clouddn.com/scrum-xp.png" alt="xp" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[构建持续集成平台]]></title>
    <link href="http://mojito515.github.io/blog/2015/12/21/yong-jenkinsshi-xian-chi-xu-ji-cheng-de-da-jian/"/>
    <updated>2015-12-21T17:40:20+08:00</updated>
    <id>http://mojito515.github.io/blog/2015/12/21/yong-jenkinsshi-xian-chi-xu-ji-cheng-de-da-jian</id>
    <content type="html"><![CDATA[<!--more-->


<ul>
<li><h3>背景</h3>

<p><strong>scrum</strong>的敏捷开发当中有很多促进项目推进的办法和方案,
可以最大限度的利用开发人员有限的时间,但是只停留在管理
方式、交流沟通方式等<strong><strong>组织实践</strong></strong>上面。一方面要<strong>快速迭代</strong>、快速容错，
另一方面又要因为持续需要有产品构建，开发人员不得不每天
多次重复的构建代码、测试代码、部署代码。</p>

<p>这一方面我们借鉴XP(<a href="http://baike.baidu.com/link?url=U89TWRLUuaWfOisUmkgvsVkunDl34lWEv3z3NNBUeY41iPnZOG7oWWGaCSdVcoE7PLJVTB7fGZkTL60aS3Q-3K">什么是XP</a>)中
的<strong>编程实践</strong>手段，利用<strong>持续集成技术</strong>（<a href="http://www.ruanyifeng.com/blog/2015/09/continuous-integration.html"><strong>什么是持续集成</strong></a>），<strong>测试驱动开发</strong>（TDD），<strong>结对编程</strong>
来支撑敏捷开发的项目推进。</p></li>
<li><h3>索引</h3></li>
<li><h4><a href="#java">java篇</a></h4></li>
<li><h4><a href="#ios">ios篇</a></h4></li>
<li><h4><a href="#android">android篇</a></h4></li>
<li><h3>选择构建工具</h3>

<p>我简单总结了一下几个开源持续集成工具（详细的比较可以移步<a href="http://cloud.51cto.com/art/201508/487605.htm">点我</a>）：</p>

<ul>
<li><strong>Jenkins</strong>  使用java语言编写 良好的插件环境，支持扩展</li>
<li><strong>Buildbot</strong>   python语言开发的项目   已经为Mozilla、Webkit、Chromium所支持</li>
<li><strong>Travis</strong>     适合新手   提供Saas  接入github账户</li>
<li><strong>Strider</strong>    由node.js+javascript编写    需要安装mongodb和node.js   需要编写脚本  上手困难</li>
<li><strong>Drone</strong>     开源的，支持各种语言的CI工具     但是你的项目必须是开源的 <a href="https://drone.io">https://drone.io</a></li>
</ul>


<p>综上，公司项目中涉及到ios、android、java三种环境，并且代码并不开
源，所以在持续构建工具中使用<strong>Jenkins</strong>再合适不过。此外Jenkins
有很好地扩展能力，有很健全的插件支持各种环境的代码构建。
Jenkins本身是java实现，在tomcat中就能很好地运行，
这一点比较适合java出身的开发同仁。</p></li>
<li><h3><span id="java">java项目的自动化构建</span></h3>

<p><strong>在linux环境下安装Jenkins</strong>有两种方式：</p>

<p>1.<code>sudo java -jar jenkins.war –httpPort=18080 –ajp13Port=18009</code></p>

<p>2.<code>yum install jenkins</code></p>

<p>第一种方式下，如果你是SSH连接到linux主机，当你关闭连接的时候，这个命令也会被中断；</p>

<p>第二种方式,是在CentOS系统中使用yum命令安装（熟悉CentOS系统的人应该不陌生），安装完成之后,
Jenkins会成为系统中的一个service，只要在命令行执行<code>service jenkins start|stop|restart</code>
就可以完成服务的启动停止和重启。</p>

<p><strong>配置文件路径</strong>为：<code>/etc/sysconfig/jenkins</code>，可能需要root权限。配置文件中主要需要修改的是启动
端口<code>JENKINS_PORT</code> (默认是8080)，使用jenkins的用户<code>JENKINS_USER</code>(默认生成一个jenkins)。
我这里的用户是cms,端口是8818,</p>

<blockquote><p>JENKINS_USER=&ldquo;cms&rdquo;<br/>
JENKINS_AJP_PORT=&ldquo;8819&rdquo;</p></blockquote>

修改jenkins涉及到的目录和文件的权限所属：

<blockquote><p>sudo chown -R cms /usr/lib/jenkins<br/>
sudo chgrp -R cms /usr/lib/jenkins<br/>
sudo chown -R cms  /var/log/jenkins<br/>
sudo chgrp -R cms  /var/log/jenkins<br/>
sudo chown -R cms  /var/lib/jenkins<br/>
sudo chgrp -R cms  /var/lib/jenkins<br/>
sudo chown -R cms  /var/cache/jenkins<br/>
sudo chgrp -R cms  /var/cache/jenkins</p></blockquote>

<p>之后就可以启动Jenkins了，执行命令<code>sudo service jenkins start</code></p>

<p><img src="http://7xpd26.com1.z0.glb.clouddn.com/jenkins-show-jenkins.png" alt="show" /></p>

<p>jenkins安装好之后，首先需要确认你本地是否有:</p>

<p> <strong>Maven</strong>  负责编译java代码<br/>
 <strong>Git</strong>    负责从代码管理服务器中拉取最新提交的代码<br/>
 <strong>JDK</strong>   这个就不用说了，你没有jenkins你也安装不了</p>

<p>好了，这里就不赘述以上工具的环境变量的配置了，一定要有。</p>

<p>打开Jenkins主界面，首先下载构建所需的插件，依次进入<code>系统管理</code>-<code>管理插件</code>，下载:</p>

<p> <strong>GIT plugin</strong><br/>
 <strong>Maven Integration plugin</strong><br/>
 <strong>Email Extension Plugin</strong>  （对jenkins自带邮件通知的扩展，可以自定义邮件模板）</p>

<h4>配置Jenkins <code>系统管理</code>-<code>系统设置</code></h4>

<p>这里主要是对maven、Git、JDK的路径做一些配置</p>

<p><img src="http://7xpd26.com1.z0.glb.clouddn.com/jenkins-system-config.png" alt="system-config" /></p>

<p>如果你下载了<strong>Email Extension Plugin</strong>插件，在系统配置中可以设置你想要的邮件通知属性</p>

<p><img src="http://7xpd26.com1.z0.glb.clouddn.com/jenkins-email-config.png" alt="email-config" /></p>

<p>系统配置之后，回到主界面，选择<code>新建</code>，填写Item名称，选择构建一个maven项目</p>

<p><img src="http://7xpd26.com1.z0.glb.clouddn.com/jenkins-create-job.png" alt="create-job" /></p>

<p>下一步，源码管理中填入你拉取代码的git地址，可以是HTTP协议，也可以是SSH。当然，如果是<strong>HTTP</strong>，要有
对应的用户名和密码；如果是<strong>SSH</strong>，用户名和密码是git版本管理所在的服务器主机的用户名和密码，
并且需要在git版本管理器所在服务器上添加ssh登录的auto文件中添加公钥
private key是jenkins所在主机的用户私钥。</p>

<p><img src="http://7xpd26.com1.z0.glb.clouddn.com/jenkins-config-git.png" alt="config-git" /></p>

<p>构建触发器中勾选<code>Build whenever a SNAPSHOT dependency is built</code>和<code>Poll SCM</code>
这样构建的触发器，会每三分钟（H/3 * * * *）轮询一遍你的代码库，只要你往git的develop
分支中commit代码，Jenkins就会构建一次</p>

<p><img src="http://7xpd26.com1.z0.glb.clouddn.com/jenkins-config-trigger.png" alt="config-trigger" /></p>

<p>编译使用的是maven，所以要确定到maven的pom文件和执行命令，如图</p>

<p><img src="http://7xpd26.com1.z0.glb.clouddn.com/jenkins-config-build.png" alt="config-build" /></p>

<p>添加构建后的动作，比如你希望执行什么shell、邮件通知到developer
或者管理员等</p>

<p><img src="http://7xpd26.com1.z0.glb.clouddn.com/jenkins-config-email.png" alt="config-email" /></p>

<p>这里打包好的文件在你的Jenkins主目录<code>/var/lib/jenkins</code>下地workspace里面，并且会保留
你每一次的构建代码包，有关构建结束的部署工作，你可以自己写<strong>shell</strong>脚本执行，也可以在pom文件中
写有关tomcat的插件属性，<strong>利用maven</strong>直接将代码部署到tomcat的部署目录下（其中也涉及到访问权限
的问题，这里就不展开描述了）。</p>

<p>回到主目录，你的构建job会在job list中显示，其中<code>S</code>的颜色用来区分你构建失败还是成功，
蓝色是成功，红色是失败；<code>W</code>表示你最近几次构建的情况</p>

<p><img src="http://7xpd26.com1.z0.glb.clouddn.com/jenkins-show-jobs.png" alt="show-jobs" /></p>

<p>除了自动触发构建任务，你也可以手动计划一次构建</p>

<p><img src="http://7xpd26.com1.z0.glb.clouddn.com/jenkins-build-list.png" alt="build-list" /></p>

<p>下图为每次测试结果的一个统计图：</p>

<p><img src="http://7xpd26.com1.z0.glb.clouddn.com/jenkins-show-test.png" alt="show-test" /></p>

<p>在变更记录中，能看到每次构建中，提交了哪些代码，commit的comments，谁提交的等等</p>

<p><img src="http://7xpd26.com1.z0.glb.clouddn.com/jenkins-show-summary.png" alt="show-summary" /></p>

<p>更具体的构建信息可以查看<strong>Console Output</strong> ，如下图：</p>

<p><img src="http://7xpd26.com1.z0.glb.clouddn.com/jenkins-show-console.png" alt="show-console" /></p>

<p>让我很舒服的是，当Jenkins自动构建完成之后，我会收到一个邮件提醒</p>

<p><img src="http://7xpd26.com1.z0.glb.clouddn.com/jenkins-show-email.png" alt="show-email" /></p>

<p>最后，别让你的系统谁都可以访问，用户权限在<code>首页</code>-> <code>系统管理</code>->
<code>Configure Global Security</code>里配置。</p></li>
<li><h3><span id="ios">ios项目的自动化构建</span></h3>

<p><strong>在Mac上安装Jenkins</strong>比较方便，只要从官网上下载dmg安装包就可以。</p>

<p>注意：如果你Mac上得JDK不是1.7+，安装会失败。</p>

<p>卸载Jenkins执行：<code>/Library/Application Support/Jenkins/Uninstall.command</code></p>

<p>安装之后，Mac上会多出一个用户：Jenkins，如果你想更改成为你的用户来执行Jenkins，先停掉jenkins，
更改配置文件，再重启jenkins服务（launchctl有点像linux的Service），如下执行：</p>

<p><code>sudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist</code></p>

<p><code>sudo vim +1 +/daemon +'s/daemon/staff/' +/daemon +'s/daemon/bixiaopeng' +wq org.jenkins-ci.plist</code></p>

<p><code>sudo launchctl load /Library/LaunchDaemons/org.jenkins-ci.plist</code></p>

<p>别忘了修改日志目录的用户权限和主目录的用户权限。</p>

<p>ios的app构建需要有xcode环境，所以你的部署一定是台mac电脑，但我们做的也是自动构建，所以必然不能使用
xcode可视化工具进行构建，所以我尝试了<strong>xcodebuild</strong>,大概步骤是：build->archive->IPA</p>

<p><code>xcodebuild -alltargets clean</code></p>

<p><code>xcodebuild -target HelloJenkins PROVISIONING_PROFILE="00000000-0000-0000-0000-000000000000" CONFIGURATION_BUILD_DIR=JenkinsBuild</code></p>

<p><code>xcodebuild -scheme HelloJenkins archive PROVISIONING_PROFILE="00000000-0000-0000-0000-000000000000" CODE_SIGN_IDENTITY="iPhone Developer: Justin Hyland (XXXXXXXXXX)" -archivePath ./JenkinsArchive/HelloJenkins.xcarchive</code></p>

<p><code>xcodebuild -exportArchive -exportFormat IPA -exportProvisioningProfile iOS\ Team\ Provisioning\ Profile:\ com.yourAPP.HelloJenkins -archivePath ./JenkinsArchive/HelloJenkins.xcarchive -exportPath ./JenkinsIPAExport/HelloJenkins.ipa</code></p>

<p>详见：<a href="http://www.cnblogs.com/rosepotato/p/3884851.html">http://www.cnblogs.com/rosepotato/p/3884851.html</a></p>

<p>但是构建并没有想象当中的顺利，如果你使用了第三方的jar包，总是会报错：</p>

<blockquote><p>no provisioning profile matches ‘xxx’</p></blockquote>

<p>通过调研，发现xcodebuild可以通过workspace文件构建，可以避开这些问题，
前提是你有scheme文件，跟ios的同时沟通完之后，他每次提交代码都会share scheme
文件上来。构建偶尔成功，但是还是频频报错。</p>

<p><code>xcodebuild -workspace MyProject.xcworkspace -scheme MyScheme SYMROOT=$(PWD)/build</code></p>

<p>最后的构建成功是借鉴了刘先宁在InfoQ上的一篇文章（<a href="http://www.infoq.com/cn/articles/build-ios-continuous-integration-platform-part1">构建iOS持续集成平台（一）——自动化构建和依赖管理</a>）</p>

<p>实际上是使用到了FaceBook给出的替代xcodebuild的解决方案<strong>xctool</strong>
顿时感觉，我之前就好像一直在用javac编译java代码，而不知道还有maven这个东西。
通过xctool和cocoapod，代码构建成功。</p>

<p><code>xctool -workspace SDJG.xcworkspace -scheme SDJG clean</code></p>

<p><code>xctool -workspace SDJG.xcworkspace -scheme SDJG build SYMROOT=$(PWD)/JenkinsBuild</code></p>

<p><code>xcrun -sdk iphoneos PackageApplication -v bbbuild/Debug-iphoneos/SDJG.app -o /Users/fangrichird/git/shangde1216/JenkinsIPAExport/SDJG.ipa</code></p>

<p>ios项目也就只停留在IPA这里了，因为TestFlight自从被苹果收购之后，
再不能通过jenkins的插件完成上传。解决办法停留在手动将IPA发向各种云
服务平台，或者直接用iTunes安装到测试机当中。</p>

<p>至于jenkins用到的插件和其他环境部署，请参考 <a href="#java">java篇</a></p></li>
<li><h3><span id="android">Android项目的自动化构建</span></h3>

<p><strong>Android的集成部署</strong>相对来说比较简单，跟我们的android工程师沟通，他们习惯使用
Android studio这种集成的ide，如果部署，有集成在IDE中的Gradle。</p>

<p>所以想要在linux上构建Android代码，只需要两件事情：</p>

<p>1.安装Android SDK；<br/>
2.配置Gradle环境；(JDK环境就不用说了吧)</p>

<p>other和<a href="#java">java篇</a>的配置相同，只是再需要安装一个Gradle插件，如果
你需要向不同的应用市场打包，在Gradle的配置文件中配置就好了。</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
